image:
  - Visual Studio 2019

environment:

  matrix:

    # For Python versions available on Appveyor, see
    # http://www.appveyor.com/docs/installed-software#python
    # The list here is complete (excluding Python 2.6, which
    # isn't covered by this document) at the time of writing.

    - PYTHON_VERSION: "3.13"
    
platform:
  - x64
  #- x86

install:
  # We need wheel installed to build wheels
  #- "%PYTHON%\\python.exe -m pip install wheel"
  - cmd: echo "Using cmd"

  - set CONDAPATH=C:\Miniconda38
  - if "%PLATFORM%" == "x64" set CONDAPATH=%CONDAPATH%-x64
  - call %CONDAPATH%\Scripts\activate
  # prepare environment with conda
  - conda config --add channels conda-forge
  - conda config --set channel_priority strict
  - conda config --set always_yes yes --set changeps1 no
  - conda update -q conda
  # create an environment with the appropiate python
  - conda create -y -n currentenv python=%PYTHON_VERSION%
  - conda activate currentenv
  # Check that we have the expected version and architecture for Python
  - python --version
  - python -c "import struct; print(struct.calcsize('P') * 8)"
  # install necessary packages
  - pip install cython
  - conda install -c conda-forge libpython gxx
  # mingw64 toolchain to compile python extensions
  #- conda install -q -c msys2 m2w64-toolchain


build_script:
  # set mingw32 as compiler and produce the wheel
  - python.exe setup.py config --compiler=mingw32
  # Build and install the wheel
  - python setup.py bdist_wheel
  - ps: |
      # Upload artifact to Appveyor immediately after build
      ls dist -r | Foreach-Object {
          appveyor PushArtifact $_.FullName
          pip install $_.FullName
      }
  - cd dist
  - pip install --pre --no-index -f . pyreadr
  - cd ..


test_script:
  # Put your test command here.
  # If you don't need to build C extensions on 64-bit Python 3.3 or 3.4,
  # you can remove "build.cmd" from the front of the command, as it's
  # only needed to support those cases.
  # Note that you must use the environment variable %PYTHON% to refer to
  # the interpreter you're using - Appveyor does not do anything special
  # to put the Python version you want to use on PATH.
  #- "build.cmd %PYTHON%\\python.exe setup.py test"

  # Run some tests
  - pip install xarray
  - mkdir tmp
  - cd tmp
  - python ../tests/test_basic.py
  - cd ..


after_test:
  # This step builds your wheels.
  # Again, you only need build.cmd if you're building C extensions for
  # 64-bit Python 3.3/3.4. And you need to use %PYTHON% to get the correct
  # interpreter
  #- "build.cmd %PYTHON%\\python.exe setup.py bdist_wheel"
  - dir dist

#artifacts:
#  # bdist_wheel puts your built wheel in the dist directory
#  - path: dist\*

#on_success:
#  You can use this step to upload your artifacts to a public website.
#  See Appveyor's documentation for more details. Or you can simply
#  access your wheels from the Appveyor "artifacts" tab for your build.
